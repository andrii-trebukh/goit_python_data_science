import sys
import cv2
import numpy as np
from pathlib import Path
from PIL import Image
from vehicle_license_plate_recognizer import recognizer
import tensorflow as tf
from dicttoxml import dicttoxml
from xml.dom.minidom import parseString
import re


def symbol_annotation(x, y, w, h):
    return {
        "name": "symbol",
        "bndbox": {
            "xmin": x,
            "xmax": x + w,
            "ymin": y,
            "ymax": y + h
        }
    }


SAVE_DATASET_IMAGES = "dataset_autogenerated/images"
SAVE_DATASET_ANNOTATIONS = "dataset_autogenerated/annotations"

dir = sys.argv[1]

path = Path(f"/home/sims/Projects/auto_ria/{dir}")

q_ty = len(tuple(path.iterdir()))
index = 0
for file in path.iterdir():
    if index % 100 == 0:
        print(f"{index} from {q_ty}")
    index += 1
    license_plate_predict, _, contours, plate = recognizer.get_license_plate_vehicle(file)
    # display(Image.fromarray(cv2.cvtColor(plate, cv2.COLOR_BGR2RGB)))
    if license_plate_predict != re.sub(r"^\d\d\d | |_", "", file.stem):
        continue


    annotation = {
        # "folder": "images",
        "filename": f"{file.stem}.png",
        "size": {
            "width": plate.shape[1],
            "height": plate.shape[0],
            "depth": 3
        }
    }

    plate = cv2.resize(plate, (333, 75), interpolation=cv2.INTER_LINEAR_EXACT)
    plate2 = plate.copy()
    for i, (x, y, w, h) in zip(range(len(contours)), contours):
        annotation[f"object{i}"] = symbol_annotation(x, y, w, h)
        cv2.rectangle(plate2, (x, y), (x + w , y + h), (51, 224, 172), 3)

    # display(Image.fromarray(cv2.cvtColor(plate2, cv2.COLOR_BGR2RGB)))

    
    

    annotation = {"annotation": annotation}
    annotation_xml = dicttoxml(annotation, xml_declaration=False, root=False, return_bytes=False, attr_type=False)
    annotation_xml = re.sub(r"object\d", "object", annotation_xml)

    annotation_xml = parseString(annotation_xml).toprettyxml()

    with open(f"{SAVE_DATASET_ANNOTATIONS}/{file.stem}.xml", "w") as fh:
        fh.write(annotation_xml)

    cv2.imwrite(f"{SAVE_DATASET_IMAGES}/{file.stem}.png", plate)
